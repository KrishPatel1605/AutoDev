const vscode = require("vscode");
const fs = require("fs");
const path = require("path");

let terminals = []; // keep track of running terminals

function activate(context) {
  // Tree view sidebar
  const treeDataProvider = new AutoDevProvider();
  vscode.window.createTreeView("autodevView", { treeDataProvider });

  // Register commands
  context.subscriptions.push(
    vscode.commands.registerCommand("autodev.start", startProject),
    vscode.commands.registerCommand("autodev.autoconfig", autoConfig),
    vscode.commands.registerCommand("autodev.add", addCustomProject),
    vscode.commands.registerCommand("autodev.runAll", runAllProjects),
    vscode.commands.registerCommand("autodev.stop", stopAllProjects),
    vscode.commands.registerCommand("autodev.restart", restartAllProjects),
    vscode.commands.registerCommand("autodev.remove", removeProject)
  );
}

/**
 * Start all projects from config
 */
function startProject() {
  const rootPath = getWorkspaceRoot();
  if (!rootPath) return;

  const config = readConfig(rootPath);
  
  // Run all projects defined in config
  Object.keys(config).forEach(projectName => {
    if (config[projectName].path && config[projectName].start) {
      runInTerminal(projectName, config[projectName].path, config[projectName].start, rootPath);
    }
  });
}

/**
 * Auto detect and regenerate .autodev.json by scanning all folders
 */
function autoConfig() {
  const rootPath = getWorkspaceRoot();
  if (!rootPath) return;

  const configPath = path.join(rootPath, ".autodev.json");
  const config = scanAllFolders(rootPath);
  fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
  vscode.window.showInformationMessage(".autodev.json regenerated by scanning all folders!");
}

/**
 * Add a custom project manually
 */
async function addCustomProject() {
  const rootPath = getWorkspaceRoot();
  if (!rootPath) return;

  const name = await vscode.window.showInputBox({ prompt: "Enter project name" });
  const folder = await vscode.window.showInputBox({ prompt: "Enter relative folder path (e.g. ./myapp)" });
  const command = await vscode.window.showInputBox({ prompt: "Enter start command (e.g. npm run dev)" });

  if (!name || !folder || !command) {
    vscode.window.showErrorMessage("Invalid input. Project not added.");
    return;
  }

  const configPath = path.join(rootPath, ".autodev.json");
  let config = {};
  if (fs.existsSync(configPath)) {
    config = JSON.parse(fs.readFileSync(configPath, "utf-8"));
  }

  // Add project directly to config object (not in projects array)
  config[name] = { path: folder, start: command };

  fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
  vscode.window.showInformationMessage(`Custom project "${name}" added to .autodev.json`);
}

/**
 * Remove a specific project
 */
async function removeProject() {
  const rootPath = getWorkspaceRoot();
  if (!rootPath) return;

  const config = readConfig(rootPath);
  const projectNames = Object.keys(config);

  if (projectNames.length === 0) {
    vscode.window.showWarningMessage("No projects found in .autodev.json");
    return;
  }

  const selectedProject = await vscode.window.showQuickPick(projectNames, {
    placeHolder: "Select project to remove"
  });

  if (!selectedProject) return;

  delete config[selectedProject];

  const configPath = path.join(rootPath, ".autodev.json");
  fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
  vscode.window.showInformationMessage(`Project "${selectedProject}" removed from .autodev.json`);
}

/**
 * Run all projects defined in .autodev.json
 */
function runAllProjects() {
  const rootPath = getWorkspaceRoot();
  if (!rootPath) return;

  const config = readConfig(rootPath);
  const projectNames = Object.keys(config);

  if (projectNames.length === 0) {
    vscode.window.showWarningMessage("No projects found in .autodev.json");
    return;
  }

  projectNames.forEach(projectName => {
    if (config[projectName].path && config[projectName].start) {
      runInTerminal(projectName, config[projectName].path, config[projectName].start, rootPath);
    }
  });
}

/**
 * Stop all running terminals
 */
function stopAllProjects() {
  terminals.forEach(t => t.dispose());
  terminals = [];
  vscode.window.showInformationMessage("All AutoDev terminals stopped.");
}

/**
 * Restart all projects
 */
function restartAllProjects() {
  stopAllProjects();
  setTimeout(() => {
    runAllProjects();
  }, 1000); // Give a small delay for terminals to close properly
}

/**
 * --- Helpers ---
 */
function getWorkspaceRoot() {
  const workspaceFolders = vscode.workspace.workspaceFolders;
  if (!workspaceFolders) {
    vscode.window.showErrorMessage("No workspace open!");
    return null;
  }
  return workspaceFolders[0].uri.fsPath;
}

function readConfig(rootPath) {
  const configPath = path.join(rootPath, ".autodev.json");

  if (!fs.existsSync(configPath)) {
    const config = scanAllFolders(rootPath);
    fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
    vscode.window.showInformationMessage(".autodev.json created automatically by scanning all folders!");
    return config;
  }

  return JSON.parse(fs.readFileSync(configPath, "utf-8"));
}

/**
 * Scan all folders in root directory and detect projects
 */
function scanAllFolders(rootPath) {
  const config = {};
  
  try {
    const items = fs.readdirSync(rootPath);
    
    items.forEach(item => {
      const itemPath = path.join(rootPath, item);
      
      // Check if it's a directory and not hidden/system folders
      if (fs.lstatSync(itemPath).isDirectory() && 
          !item.startsWith('.') && 
          !item.startsWith('node_modules') &&
          !item.startsWith('dist') &&
          !item.startsWith('build')) {
        
        const projectConfig = detectProjectType(itemPath, item);
        if (projectConfig) {
          config[item] = projectConfig;
        }
      }
    });
  } catch (error) {
    vscode.window.showErrorMessage(`Error scanning folders: ${error.message}`);
  }

  return config;
}

/**
 * Detect project type and return appropriate config
 */
function detectProjectType(folderPath, folderName) {
  const pkgPath = path.join(folderPath, "package.json");
  
  // Check for package.json
  if (fs.existsSync(pkgPath)) {
    try {
      const pkg = JSON.parse(fs.readFileSync(pkgPath, "utf-8"));
      
      // Determine start command based on available scripts
      let startCommand = "npm start";
      if (pkg.scripts) {
        if (pkg.scripts.dev) startCommand = "npm run dev";
        else if (pkg.scripts.start) startCommand = "npm start";
        else if (pkg.scripts.serve) startCommand = "npm run serve";
      }
      
      return {
        path: `./${folderName}`,
        start: startCommand
      };
    } catch (error) {
      console.warn(`Error parsing package.json in ${folderName}:`, error.message);
    }
  }

  // Check for other project types
  
  // Python projects
  if (fs.existsSync(path.join(folderPath, "requirements.txt")) || 
      fs.existsSync(path.join(folderPath, "pyproject.toml")) ||
      fs.existsSync(path.join(folderPath, "setup.py"))) {
    return {
      path: `./${folderName}`,
      start: "python main.py"
    };
  }

  // Go projects
  if (fs.existsSync(path.join(folderPath, "go.mod"))) {
    return {
      path: `./${folderName}`,
      start: "go run ."
    };
  }

  // Java projects (Maven)
  if (fs.existsSync(path.join(folderPath, "pom.xml"))) {
    return {
      path: `./${folderName}`,
      start: "mvn spring-boot:run"
    };
  }

  // Java projects (Gradle)
  if (fs.existsSync(path.join(folderPath, "build.gradle")) ||
      fs.existsSync(path.join(folderPath, "build.gradle.kts"))) {
    return {
      path: `./${folderName}`,
      start: "./gradlew bootRun"
    };
  }

  // PHP projects
  if (fs.existsSync(path.join(folderPath, "composer.json"))) {
    return {
      path: `./${folderName}`,
      start: "php -S localhost:8000"
    };
  }

  // Rust projects
  if (fs.existsSync(path.join(folderPath, "Cargo.toml"))) {
    return {
      path: `./${folderName}`,
      start: "cargo run"
    };
  }

  // If folder contains common web files, assume it's a web project
  const webFiles = ["index.html", "index.php", "app.js", "server.js"];
  const hasWebFiles = webFiles.some(file => fs.existsSync(path.join(folderPath, file)));
  
  if (hasWebFiles) {
    return {
      path: `./${folderName}`,
      start: "python -m http.server 8000"
    };
  }

  return null; // No recognizable project structure
}

function runInTerminal(name, dir, command, rootPath) {
  const term = vscode.window.createTerminal(name);
  term.show(true);
  const fullPath = path.join(rootPath, dir);
  term.sendText(`cd "${fullPath}"`);
  term.sendText(command);
  terminals.push(term);
}

/**
 * Sidebar Provider (TreeView)
 */
class AutoDevProvider {
  getTreeItem(element) {
    return element;
  }
  getChildren() {
    return [
      this.makeItem("Start All Projects", "autodev.start"),
      this.makeItem("Auto Config (Scan Folders)", "autodev.autoconfig"),
      this.makeItem("Add Custom Project", "autodev.add"),
      this.makeItem("Remove Project", "autodev.remove"),
      this.makeItem("Run All Projects", "autodev.runAll"),
      this.makeItem("Stop All", "autodev.stop"),
      this.makeItem("Restart All", "autodev.restart")
    ];
  }
  makeItem(label, command) {
    const item = new vscode.TreeItem(label, vscode.TreeItemCollapsibleState.None);
    item.command = { command, title: label };
    return item;
  }
}

function deactivate() {
  stopAllProjects();
}

module.exports = { activate, deactivate };